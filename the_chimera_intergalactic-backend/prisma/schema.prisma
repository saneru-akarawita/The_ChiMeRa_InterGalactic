generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  TRAVELER
}

enum LocationType {
  ASTEROID
  PLANET
}

enum PackageCategory {
  ADVENTURE
  SUMMIT
}

enum SeatType {
  FIRST
  ECONOMY
  BUSINESS
}

model User {
  id            String    @id @default(dbgenerated("(concat('user_', gen_random_uuid()))::TEXT"))
  email         String    @unique
  password      String
  refresh_token String?
  user_type     UserType  @default(TRAVELER)
  traveler      Traveler?
  admin         Admin?
}

model Admin {
  id      String @id @default(dbgenerated("(concat('admin_', gen_random_uuid()))::TEXT"))
  user    User   @relation(fields: [user_id], references: [id])
  user_id String @unique
}

model Traveler {
  id          String   @id @default(dbgenerated("(concat('traveler_', gen_random_uuid()))::TEXT"))
  name        String
  dob         DateTime
  galaxy      String
  planet      String
  profile_pic String
  user        User     @relation(fields: [user_id], references: [id])
  user_id     String   @unique
}

model Location {
  id           String       @id @default(dbgenerated("(concat('location_', gen_random_uuid()))::TEXT"))
  name         String
  description  String
  x            Float
  y            Float
  z            Float
  image        String
  destinations String[]
  type         LocationType @default(PLANET)
  activities   Activity[]
}

model Activity {
  id              String            @id @default(dbgenerated("(concat('activity_', gen_random_uuid()))::TEXT"))
  name            String
  description     String
  location_id     String
  location        Location          @relation(fields: [location_id], references: [id])
  PackageActivity PackageActivity[]
}

model Package {
  id              String            @id @default(dbgenerated("(concat('package_', gen_random_uuid()))::TEXT"))
  name            String
  price           Float
  duration        Float
  accomadation    String?
  category        PackageCategory
  destinations    String[]
  additional      String[]
  PackageActivity PackageActivity[]
}

model PackageActivity {
  id          String   @id @default(dbgenerated("(concat('package_activity_', gen_random_uuid()))::TEXT"))
  package_id  String
  activity_id String
  package     Package  @relation(fields: [package_id], references: [id])
  activity    Activity @relation(fields: [activity_id], references: [id])
}

model Ship {
  id         String @id @default(dbgenerated("(concat('ship_', gen_random_uuid()))::TEXT"))
  name       String
  speed      Int
  model      String
  start      String
  end        String
  identifier String @unique
  ship_pic   String @default("ship.png")
  Seat       Seat?
}

model Seat {
  id             String   @id @default(dbgenerated("(concat('seat_', gen_random_uuid()))::TEXT"))
  type           SeatType @default(ECONOMY)
  booking_status Boolean  @default(false)
  ship           Ship     @relation(fields: [ship_id], references: [id])
  ship_id        String   @unique
}
